# ТИПЫ ДАННЫХ СПИСКИ

# ● СПИСОК В python это встроенный тип данных
# представляющий собой одну из разновидностей структур данных

# ● СПИСКИ - ЭТО ОДНА ИЗ СТРУКТУР
# ДАННЫХ ИСПОЛЬЗУЮТСЯ ОНИ ДЛЯ ХРАНЕНИЯ И РАБОТЫ С КАКОЙ ЛИБО 
# ИНФОРМАЦИЕЙ

# ● Список (list) представляет тип данных, который хранит 
# набор или последовательность элементов.
#  Для создания списка в квадратных скобках ([]) через запятую
#   перечисляются все его элементы. 
#   Во многих языках программирования есть аналогичная структура данных, 
#   которая называется массив. 
#   Например, определим список чисел:

# ●  Также для создания списка можно использовать конструктор list(): 

# ● numbers1 = [] 
# ● numbers2 = list() 


# ●  list списки 

# numbers = [3,4,5,9,12]
# print (numbers)
# output [3, 4, 5, 9, 12]


# ● list списки

# numbers = [3,4,5,35.1,'string']
# print (numbers)
# output [3, 4, 5, 35.1, 'string']

# ● ДОБАВЛЕНИЕ СПИСКА ВНУТРИ СПИСКА 

# numbers = [33,5,33.1, [45.7]]
# print (numbers)
# OUTPUT [33, 5, 33.1, [45.7]]

# ● ДЛЯ ТОГО ЧТОБЫ  ОБРАТИТЬСЯ К ОПРЕДЕЛЕННОМУ ЭЛЕМЕНТУ В СПИСКЕ 
# МЫ ДОЛЖНЫ УКАЗАТЬ ИМЯ СПИСКА И В [] ЕГО ПОРЯДКОВЫЙ НОМЕР ИЛИ 
# ИНАЧЕ ЭТО НАЗЫВАЕТСЯ INDEX

# names = ['water','ice', 'tea','freeze', 'cold','hot','red','hot','chili','peppers']
# print (names[7])
# OUTPUT hot

#  ● ЦИКЛ FOR, ЦИКЛ СО СЧЕТЧИКОМ FOR РАБОТАЕТ С ИТЕРИРУЕМЫМИ 
#  ОБЬЕКАТАМИ 
#  СПИСКИ ЭТО ВСЕГДА ИТЕРИРУЕМЫЕ ОБЬЕКТЫ

# stings = ['water','ice', 'tea']
# for sting in stings:
#       print (stings)
# OUTPUT names = ['water','ice', 'tea'

#  ● ЦИКЛ FOR

# stings = ['water','ice', 'tea']
# for sting in stings:
#       print (stings)
# OUTPUT  ['water', 'ice', 'tea']
# ['water', 'ice', 'tea']
# ['water', 'ice', 'tea']


# ● append  ДОБАВЛЯЕТ СТРОКУ В КОНЕЦ СПИСКА

# strokes = ['red','hot','chili','peppers']
# strokes.append('one of my favorite bands')
# print (strokes)

# OUTPUT ['red', 'hot', 'chili', 'peppers', 'one of my favorite bands'
# .append ДОБАВЛЯЕТ СТРОКУ В КОНЕЦ СПИСКА

# ● МЕТОД .pop()
# pop([index]): удаляет и возвращает элемент по индексу index. 
# Если индекс не передан, то просто удаляет последний элемент.

# cwb = ['lost', 'aware','error']
# cwb.pop()
# print (cwb)
# output ['lost', 'aware']



# ● МЕТОД index 
# Функция Index - это встроенный метод списка, который позволяет 
# узнать индекс или позицию элемента в последовательности.

# Другими словами, этот метод ищет элемент в списке и возвращает 
# его индекс.

#  ●
# names = ['water','ice', 'tea','freeze', 'cold']
# n=names.index('freeze')
# print (n)
#output 3


# print (type(numbers))
# otput list


# ● МЕТОД СОРТРОВКИ - СОРТИРУЮТ СПИСОК ПО ВОЗРАСТАНИЮ


# mk = [8,3,15,47,68,99,144]
# mk.sort()
# print(mk)

# OUTPUT [3, 8, 15, 47, 68, 99, 144]


# ● МЕТОД СОРТИРОВКИ REVERSE СОРТИРУЕТ ЧИСЛА 
# ПО УБЫВАНИЮ


# mk = [11,9,1,44,19,81,144]
# mk.sort(reverse = True)
# print(mk)

# OUTPUT [144, 81, 44, 19, 11, 9, 1] 

# ● ИЗМЕНЕНИЕ ЭЛЕМЕНТА СПИСКА
# mk = [8,3,15,47,68,99,144]
# mk [1]= 'c' #УКАЗЫВАЕТСЯ INDEX ПОЭТОМУ ЗАПИСАЛ 1
# print(mk)
# OUTPUT [8, 'c', 15, 47, 68, 99, 144]

# ● СОРТИРОВКА СТРОК И ЧИСЕЛ ВЫДАЕТ ОШИБКУ  

# mk = [8,3,15,47,68,99,144]
# mk [1]= 'c'
# mk.sort()  # OUTPUT TypeError: not supported between instances of 'str' and 'int'
# print(mk)


# ● Кроме того, если нам необходим последовательный список чисел, то для его создания удобно использовать функцию range, которая имеет три формы:

# ● range(end): создается набор чисел от 0 до числа end 

# ● range(start, end): создается набор чисел от числа start до числа end 

# ● range(start, end, step): создается набор чисел от числа start до числа end с шагом step 


a = list(range(10))
print(a)

# numbers = list(range(10)) 
# print(numbers)